---
title: Getting started with Hakyll
org: personal
tags: hakyll, haskell
---

intro

Note that going forward I'm going to assume that you have a working Haskell
installation and a basic knowledge of Haskell.

## Getting Started

First thing we'll need to do is get Hakyll installed. As with most Haskell
install steps, this might take a minute:

```text
% cabal install hakyll
```

This will provide a handy binary for you[^1]. We can now run `hakyll-init`
with the name of our site:

[^1]: Note that this binary will live in `~/.cabal/bin/`. If this directory isn't in your `PATH`, you might want to add it.

```text
% hakyll-init blog
```

This will generate a basic scaffold for you:

```text
% tree blog
blog
├── about.rst
├── blog.cabal
├── contact.markdown
├── css
│   └── default.css
├── images
│   └── haskell-logo.png
├── index.html
├── posts
│   ├── 2012-08-12-spqr.markdown
│   ├── 2012-10-07-rosa-rosa-rosam.markdown
│   ├── 2012-11-28-carpe-diem.markdown
│   └── 2012-12-07-tu-quoque.markdown
├── site.hs
└── templates
    ├── archive.html
    ├── default.html
    ├── post-list.html
    └── post.html

4 directories, 15 files
```

You can see a few things are generated by default:

 - A `posts` directory with some example blog posts
 - A `template` directory with some basic html templates
 - Some basic pages like `index`, `about`, and `contact`
 - A default `cabal` file
 - `site.hs`, which will serve as the main entry point for Hakyll.

The next thing we want to do is to make sure we're using Cabal's sandboxes:

```text
% cabal sandbox init
```

Then we can install the site's dependencies:

```text
% cabal install --dependencies-only
```

Installing the dependencies on their own will prevent Cabal from trying to
install the `site` binary that the default Hakyll template creates into
`.cabal-sandbox/bin`. I like to try to run everything through `cabal run` for
simplicity, and having this binary in our path can lead to some bad habits and
confusion down the road.

Now, we can build the Haskell binary:

```text
% cabal build
```

By default, the template is set up to build a binary called `site`.


 - Create site
   - cabal build
   - cabal run -- build
 - View site
   - cabal run -- watch
   - pow

## Basic customization

 - match
 - create
 - route
 - compile
 - Combining patterns

## Advanced usage (separate posts?)

 - Indexed urls
 - Working with tags
 - unixFilter
 - Dependencies

## Deployment with CircleCI and GitHub Pages (separate post)

 - Building with Circle
  - Setting the ghc version
  - Overriding the dependency installation
  - Testing (checking urls)
 - Deploying to github pages
  - .nojekyll
  - Deploy script
  - CI deploy script
  - Adding an SSH key to Circle

conclusion

next steps
